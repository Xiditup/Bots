import asyncio
import requests
import telegram
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TON_API_URL = "https://tonapi.io/v2/blockchain/accounts/testnetblockchain.ton/transactions"
TON_API_KEY = "AF3AGXB6IMQGMZYAAAAOIJTAQYIFAPHU4U6BUQAOWRHCIWP5QNPN3Q35XLSB5CTBNCTX3XA"  # –í–∞—à –∫–ª—é—á
TELEGRAM_TOKEN = "7656039200:AAHnL9ro9Fx9I5kO7uqnoOlqi3GNq-jhI5k"  # –û—Ç @BotFather
CHAT_ID = "-1002421103941"  # –£–∑–Ω–∞–π—Ç–µ —á–µ—Ä–µ–∑ getUpdates
LAST_TX_FILE = "last_tx_id.json"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö—ç—à–∞

bot = telegram.Bot(token=TELEGRAM_TOKEN)


def load_last_tx_id():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ö—ç—à –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(LAST_TX_FILE):
        with open(LAST_TX_FILE, "r") as f:
            data = json.load(f)
            return data.get("last_tx_id")
    return None


def save_last_tx_id(tx_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ö—ç—à –≤ —Ñ–∞–π–ª."""
    with open(LAST_TX_FILE, "w") as f:
        json.dump({"last_tx_id": tx_id}, f)


def get_transactions():
    headers = {"Authorization": f"Bearer {TON_API_KEY}"}
    try:
        response = requests.get(TON_API_URL, headers=headers)
        if response.status_code == 200:
            data = response.json().get("transactions", [])
            print("–û—Ç–≤–µ—Ç API:", data)  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            return data
        else:
            print(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []


def format_transaction(tx):
    amount = int(tx.get("in_msg", {}).get("value", 0)) / 1e9 if tx.get("in_msg") else "N/A"
    comment = tx.get("in_msg", {}).get("decoded_body", {}).get("text", "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
    sender = tx.get("in_msg", {}).get("source", "N/A")
    tx_hash = tx.get("hash", "unknown")[:10] + "..."  # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Ö—ç—à –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã

    return (f"üí∏ –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è\n"
            f"üí∞ –°—É–º–º–∞: {amount} TON\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
            f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender}\n"
            f"üîó –•—ç—à: {tx_hash}")


async def send_message(chat_id, text):
    await bot.send_message(chat_id=chat_id, text=text)


async def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ö—ç—à –∏–∑ —Ñ–∞–π–ª–∞
    last_tx_id = load_last_tx_id()

    # –ï—Å–ª–∏ last_tx_id –Ω–µ –∑–∞–¥–∞–Ω (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫), –±–µ—Ä–µ–º —Ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if last_tx_id is None:
        transactions = get_transactions()
        if transactions:
            last_tx_id = transactions[0].get("hash", "unknown")  # –°–∞–º–∞—è –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            save_last_tx_id(last_tx_id)
            print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π last_tx_id: {last_tx_id}")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ last_tx_id")
            last_tx_id = "unknown"

    while True:
        transactions = get_transactions()
        if transactions:
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–ø–µ—Ä–≤–∞—è –≤ —Å–ø–∏—Å–∫–µ)
            latest_tx = transactions[0]
            tx_id = latest_tx.get("hash", "unknown")

            # –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–æ–≤–∞—è (–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç last_tx_id), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ–µ
            if tx_id != last_tx_id:
                try:
                    message = format_transaction(latest_tx)
                    await send_message(CHAT_ID, message)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    last_tx_id = tx_id
                    save_last_tx_id(last_tx_id)  # –û–±–Ω–æ–≤–ª—è–µ–º last_tx_id
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {tx_id}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            else:
                print(f"–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –ø–æ—Å–ª–µ–¥–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è: {last_tx_id}")
        else:
            print("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ API")
        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥


if __name__ == "__main__":
    asyncio.run(main())